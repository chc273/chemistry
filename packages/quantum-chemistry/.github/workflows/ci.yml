name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Quality gates - fast checks
  quality-gates:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
    
    - name: Lint with ruff
      run: |
        source .venv/bin/activate
        ruff check src/ tests/
        ruff format --check src/ tests/
    
    - name: Type check with mypy
      run: |
        source .venv/bin/activate
        mypy src/quantum/chemistry/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Allow type checking to fail initially
    
    - name: Check import structure
      run: |
        source .venv/bin/activate
        python -c "import quantum.chemistry; print('Import successful')"
        python -c "from quantum.chemistry.multireference import CASSCFMethod; print('Multireference import successful')"

  # Core functionality tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-group: ['core', 'multireference', 'benchmarking']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gfortran \
          libblas-dev \
          liblapack-dev \
          libhdf5-dev
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
    
    - name: Run core tests
      if: matrix.test-group == 'core'
      run: |
        source .venv/bin/activate
        python -m pytest tests/unit/test_active_space.py tests/unit/test_fcidump.py -v --tb=short
    
    - name: Run multireference tests
      if: matrix.test-group == 'multireference'
      run: |
        source .venv/bin/activate
        python -m pytest tests/unit/test_multireference.py -v --tb=short
    
    - name: Run benchmarking tests
      if: matrix.test-group == 'benchmarking'
      run: |
        source .venv/bin/activate
        python -m pytest tests/unit/test_benchmarking.py -v --tb=short
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-group }}
        path: |
          .pytest_cache/
          *.log

  # Integration and validation tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gfortran \
          libblas-dev \
          liblapack-dev \
          libhdf5-dev
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
    
    - name: Run integration workflow test
      run: |
        source .venv/bin/activate
        python -c "
        from quantum.chemistry.multireference.workflows import MultireferenceWorkflow
        from pyscf import gto, scf
        
        # Test complete workflow
        mol = gto.Mole()
        mol.atom = 'H 0 0 0; H 0 0 0.74'
        mol.basis = 'sto-3g'
        mol.build()
        
        mf = scf.RHF(mol)
        mf.kernel()
        
        workflow = MultireferenceWorkflow()
        results = workflow.run_calculation(
            mf,
            active_space_method='avas',
            mr_method='casscf'
        )
        
        print(f'Workflow test successful! Energy: {results[\"multireference_result\"].energy:.6f}')
        assert results['multireference_result'].energy < 0
        print('Integration test PASSED')
        "
    
    - name: Run benchmark validation test
      run: |
        source .venv/bin/activate
        python -c "
        from quantum.chemistry.multireference.benchmarking import create_standard_benchmark_datasets, ValidationRunner
        
        # Test benchmark infrastructure
        datasets = create_standard_benchmark_datasets()
        print(f'Created {len(datasets)} benchmark datasets')
        
        # Test validation runner on small subset
        runner = ValidationRunner()
        questdb = datasets['questdb']
        
        # Run validation on first molecule only (for CI speed)
        if questdb.entries:
            mol = questdb.entries[0].system
            results = runner.validate_molecule(mol, methods=['casscf'])
            print(f'Validation test: {results[\"validation_status\"]}')
            assert results['validation_status'] in ['success', 'partial_success', 'failed']
        
        print('Benchmark validation test PASSED')
        "

  # Docker build and test
  docker-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker development image
      run: |
        docker build --target development -t quantum-chemistry:dev .
    
    - name: Build Docker testing image
      run: |
        docker build --target testing -t quantum-chemistry:test .
    
    - name: Run tests in Docker container
      run: |
        docker run --rm quantum-chemistry:test
    
    - name: Build Docker production image
      run: |
        docker build --target production -t quantum-chemistry:prod .
    
    - name: Test production image
      run: |
        docker run --rm quantum-chemistry:prod python -c "
        import quantum.chemistry
        from quantum.chemistry.multireference import CASSCFMethod
        print('Production image test PASSED')
        "

  # Performance and regression tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gfortran \
          libblas-dev \
          liblapack-dev \
          libhdf5-dev
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv  
        source .venv/bin/activate
        uv pip install -e .[dev]
    
    - name: Run performance benchmarks
      run: |
        source .venv/bin/activate
        python -c "
        import time
        from quantum.chemistry.multireference.benchmarking import create_standard_benchmark_datasets, ValidationRunner
        
        print('Running performance benchmarks...')
        start_time = time.time()
        
        # Create datasets
        datasets = create_standard_benchmark_datasets()
        
        # Run limited validation for performance testing
        runner = ValidationRunner()
        report = runner.generate_validation_report(
            datasets['questdb'], 
            methods=['casscf'], 
            max_systems=3
        )
        
        elapsed_time = time.time() - start_time
        print(f'Benchmark completed in {elapsed_time:.2f} seconds')
        
        # Performance regression check (should complete within reasonable time)
        assert elapsed_time < 300, f'Benchmark took too long: {elapsed_time:.2f}s'
        print('Performance test PASSED')
        "
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark_*.json
          performance_*.log

  # Code coverage reporting
  coverage:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gfortran \
          libblas-dev \
          liblapack-dev
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
        uv pip install coverage pytest-cov
    
    - name: Run tests with coverage
      run: |
        source .venv/bin/activate
        python -m pytest tests/ --cov=src/quantum/chemistry --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false