# Dice SHCI Package Docker Build
# Multi-stage build for optimized production image

# Build stage
FROM ubuntu:24.04 AS dice-builder

ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    make \
    git \
    python3-dev \
    python3-pip \
    libboost-all-dev \
    libopenmpi-dev \
    openmpi-bin \
    mpich \
    libmpich-dev \
    libeigen3-dev \
    libhdf5-dev \
    libhdf5-openmpi-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
RUN pip3 install --break-system-packages numpy scipy

# Clone Dice repository
WORKDIR /opt
RUN git clone https://github.com/sanshar/Dice.git dice

WORKDIR /opt/dice

# Build Dice using the existing Makefile
# First, patch the Makefile to work with ARM architecture
RUN sed -i 's/-march=core-avx2/-march=native/g' Makefile

# Check what we have and try to build SHCI specifically
RUN ls -la && make SHCI

# Create environment setup script
RUN echo '#!/bin/bash\n\
export DICE_ROOT=/opt/dice\n\
export PATH=$DICE_ROOT/bin:$PATH' > /opt/dice/setup_env.sh \
    && chmod +x /opt/dice/setup_env.sh

# Production stage
FROM ubuntu:24.04 AS dice-production

ENV DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    libboost-serialization1.83.0 \
    libboost-mpi1.83.0 \
    libopenmpi3 \
    openmpi-bin \
    && rm -rf /var/lib/apt/lists/*

# Install Python runtime dependencies
RUN pip3 install --break-system-packages numpy scipy

# Copy built Dice from builder stage  
COPY --from=dice-builder /opt/dice/bin /opt/dice/bin
COPY --from=dice-builder /opt/dice/setup_env.sh /opt/setup_dice.sh
# Also copy any executables that might be built in the root directory
COPY --from=dice-builder /opt/dice/SHCI /opt/dice/bin/ 2>/dev/null || echo "No SHCI executable found"

# Set up environment
ENV DICE_ROOT=/opt/dice
ENV PATH=/opt/dice/bin:$PATH

# Create a test script
RUN echo '#!/bin/bash\n\
echo "Testing Dice installation..."\n\
source /opt/setup_dice.sh\n\
if [ -d "/opt/dice/bin" ]; then\n\
    echo "Dice bin directory found:"\n\
    ls -la /opt/dice/bin/\n\
    echo "Dice build test completed successfully!"\n\
else\n\
    echo "Error: Dice executable not found"\n\
    exit 1\n\
fi' > /opt/test_dice.sh \
    && chmod +x /opt/test_dice.sh

WORKDIR /opt/dice

# Set default command to test installation
CMD ["/opt/test_dice.sh"]