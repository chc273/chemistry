[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "quantum"
version = "0.1.0"
description = "A comprehensive namespace package for quantum chemistry, materials science, and quantum computing with ASE/PyMatGen/PySCF integration"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Chemistry Team", email = "team@quantum.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
]
requires-python = ">=3.10"
dependencies = [
    "quantum-core",
    "quantum-chemistry",
    "quantum-materials",
    "quantum-computing",
    "quantum-ml",
    "quantum-cli",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.0.285",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "nbsphinx>=0.9.0",
]

[project.scripts]
quantum = "quantum.cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["packages/*/src"]

# uv workspace configuration
[tool.uv.workspace]
members = [
    "packages/quantum-core",
    "packages/quantum-chemistry", 
    "packages/quantum-materials",
    "packages/quantum-computing",
    "packages/quantum-ml",
    "packages/quantum-cli",
]

[tool.uv.sources]
quantum-core = { workspace = true }
quantum-chemistry = { workspace = true }
quantum-materials = { workspace = true }
quantum-computing = { workspace = true }
quantum-ml = { workspace = true }
quantum-cli = { workspace = true }

[tool.ruff]
line-length = 88
target-version = "py310"
src = ["packages/*/src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["quantum.core", "quantum.chemistry", "quantum.materials", "quantum.computing", "quantum.ml", "quantum.cli"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["packages/*/src"]

[tool.coverage.run]
source = ["packages/*/src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]